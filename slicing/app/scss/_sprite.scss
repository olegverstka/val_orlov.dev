/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$s-facebook-name: 's-facebook';
$s-facebook-x: 0px;
$s-facebook-y: 111px;
$s-facebook-offset-x: 0px;
$s-facebook-offset-y: -111px;
$s-facebook-width: 11px;
$s-facebook-height: 22px;
$s-facebook-total-width: 290px;
$s-facebook-total-height: 133px;
$s-facebook-image: '../img/sprite.png';
$s-facebook: (0px, 111px, 0px, -111px, 11px, 22px, 290px, 133px, '../img/sprite.png', 's-facebook', );
$s-ico-play-name: 's-ico_play';
$s-ico-play-x: 0px;
$s-ico-play-y: 31px;
$s-ico-play-offset-x: 0px;
$s-ico-play-offset-y: -31px;
$s-ico-play-width: 60px;
$s-ico-play-height: 60px;
$s-ico-play-total-width: 290px;
$s-ico-play-total-height: 133px;
$s-ico-play-image: '../img/sprite.png';
$s-ico-play: (0px, 31px, 0px, -31px, 60px, 60px, 290px, 133px, '../img/sprite.png', 's-ico_play', );
$s-instagram-name: 's-instagram';
$s-instagram-x: 200px;
$s-instagram-y: 31px;
$s-instagram-offset-x: -200px;
$s-instagram-offset-y: -31px;
$s-instagram-width: 22px;
$s-instagram-height: 22px;
$s-instagram-total-width: 290px;
$s-instagram-total-height: 133px;
$s-instagram-image: '../img/sprite.png';
$s-instagram: (200px, 31px, -200px, -31px, 22px, 22px, 290px, 133px, '../img/sprite.png', 's-instagram', );
$s-line-name: 's-line';
$s-line-x: 0px;
$s-line-y: 0px;
$s-line-offset-x: 0px;
$s-line-offset-y: 0px;
$s-line-width: 290px;
$s-line-height: 11px;
$s-line-total-width: 290px;
$s-line-total-height: 133px;
$s-line-image: '../img/sprite.png';
$s-line: (0px, 0px, 0px, 0px, 290px, 11px, 290px, 133px, '../img/sprite.png', 's-line', );
$s-phone-name: 's-phone';
$s-phone-x: 80px;
$s-phone-y: 31px;
$s-phone-offset-x: -80px;
$s-phone-offset-y: -31px;
$s-phone-width: 40px;
$s-phone-height: 40px;
$s-phone-total-width: 290px;
$s-phone-total-height: 133px;
$s-phone-image: '../img/sprite.png';
$s-phone: (80px, 31px, -80px, -31px, 40px, 40px, 290px, 133px, '../img/sprite.png', 's-phone', );
$s-phone-hover-name: 's-phone_hover';
$s-phone-hover-x: 140px;
$s-phone-hover-y: 31px;
$s-phone-hover-offset-x: -140px;
$s-phone-hover-offset-y: -31px;
$s-phone-hover-width: 40px;
$s-phone-hover-height: 40px;
$s-phone-hover-total-width: 290px;
$s-phone-hover-total-height: 133px;
$s-phone-hover-image: '../img/sprite.png';
$s-phone-hover: (140px, 31px, -140px, -31px, 40px, 40px, 290px, 133px, '../img/sprite.png', 's-phone_hover', );
$s-vk-name: 's-vk';
$s-vk-x: 242px;
$s-vk-y: 31px;
$s-vk-offset-x: -242px;
$s-vk-offset-y: -31px;
$s-vk-width: 26px;
$s-vk-height: 15px;
$s-vk-total-width: 290px;
$s-vk-total-height: 133px;
$s-vk-image: '../img/sprite.png';
$s-vk: (242px, 31px, -242px, -31px, 26px, 15px, 290px, 133px, '../img/sprite.png', 's-vk', );
$spritesheet-width: 290px;
$spritesheet-height: 133px;
$spritesheet-image: '../img/sprite.png';
$spritesheet-sprites: ($s-facebook, $s-ico-play, $s-instagram, $s-line, $s-phone, $s-phone-hover, $s-vk, );
$spritesheet: (290px, 133px, '../img/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
